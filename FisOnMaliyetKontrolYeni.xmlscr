<?xml version="1.0"?>
<ScriptDefinition xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Description="FisOnMaliyetKontrol" Enabled="false" Priority="0" ScriptName="FisOnMaliyetKontrolYeni">
  <Events>
    <Event Enabled="true" ObjectName="DemandReceiptEN" />
    <Event Enabled="true" EventName="BeforePost" FunctionName="OnBeforePost" ObjectName="DemandReceiptEN" />
    <Event Enabled="true" ObjectName="OrderReceiptEN" />
    <Event Enabled="true" EventName="BeforePost" FunctionName="OnBeforePost" ObjectName="OrderReceiptEN" />
    <Event Enabled="true" ObjectName="WorkOrderProductionEN" />
    <Event Enabled="true" EventName="AfterSucceededPost" FunctionName="OnAfterSucceededPost" ObjectName="WorkOrderProductionEN" />
  </Events>
  <Histories>
    <History EditedBy="Ömer" EntryDate="0001-01-01T00:00:00">
      <Change />
    </History>
    <History EditedBy="Ömer" EntryDate="2022-06-24T00:00:00">
      <Change>Müşteri daima "TL" döviz cinsi seçtiği için yalnizca döviz birim fiyati kontrol edecek şekilde revize edildi.</Change>
    </History>
  </Histories>
  <ScriptText>/*24/06/2022 Müşteri daima "TL" döviz cinsi seçtiği için yalnizca döviz birim fiyati kontrol edecek şekilde revize edildi.*/

/*Script; talep fişinde seçili olan malzemelerin miktar ve fiyatlarini,
tahsisli orderinin tedariğinde (varyant1, varyant2, tedarik grubu, operasyon gözeterek) hesaplanan miktar ile 
VE tahsisli orderina bağli ön maliyetindeki (varyant gözetmeksizin) fiyat ile kiyasliyor. 
Satirdaki ilgili malzeme tedarik hesaplamasinda veya ön maliyette bulunmazsa uyari veriyor.
Satirdaki miktar, tedarikte (varyant1, varyant2, tedarik grubu, operasyon gözeterek) hesaplanan miktardan aşağida belirtilen yüzdeden daha fazla ise uyari veriyor.
Satirda belirtilen fiyat bilgisi için, ön maliyet hesaplamasindaki döviz cinsleri uyumsuz ise 
veya döviz cinsleri uyumlu ancak satirdaki fiyat, ön maliyet çalişmasindan daha yüksek ise uyari veriyor. 
Uyari verdiği herhangi bir koşul için de talep fişi satirini onaysiza çekiyor. 
Bir kez onaysiza çekilen satir bir daha onaysiza çekilmiyor, açik talepler ekranindan manuel onaylanabilir. 
Talep fişinden sipariş oluşturulduğunda, talep fişinden aktarilan satirdaki miktar ve fiyattan daha yüksek bir fiyat seçilip kaydedilmeye çalişilirsa sipariş onaysiza çekiliyor. 
Order üretim girişlerinde seçilen operasyonlarda ön maliyet çalişmasindakinden daha yüksek bir fiyat seçilirse 
uyari verip orderin müşteri temsilcisi ve aşağida belirtilen mail adreslerine mail gönderiyor.*/

kg_id = 26;
kg_id2 = 0;
kg_id3 = 0;
	
piece_id = 28; 
piece_id2 = 0;
piece_id3 = 0;

kg_tolerance = 5m;
piece_tolerance = 3m;

/*Üstteki alanlara ilgili birimlerin (Kg ve Adet) "MD_UnitSetItem" tablosundaki RecId karşiliklari gelmeli. 
Müşterinin veritabaninda ayni birimler birden fazla var ve kullanimda ise 2. ve 3. lerin karşilarina yazilabilir (toplam 3 taneye kadar). 
İlgili birimlerin izin verilen fazla yüzdeleri de yukaridaki şekilde ve isimde olmak kaydiyla değiştirilebilir. (Mevcut: Kg için 5%, Adet için 3%)*/

/*Altta mail alici adresleri şekildeki gibi aralarinda noktali virgüller olacak şekilde girilmeli. 
Ek mail adresi olmayacak ise tirnak işaretlerinin içerisi (mail_recipients = ""; şeklinde) boş birakilabilir.*/

mail_recipients = "selcan.kaya@enkayyazilim.com;b@b.com";

function OnBeforePost(sender, eventArg)
{
    if (BaseObject != null
    &amp;&amp; BaseObject.Name == "DemandReceiptEN"
    &amp;&amp; BaseObject.CurrentRow != null 
    &amp;&amp; BaseObject.CurrentRow.Row != null)
    {
	    total_message = string.Empty;
	
	    foreach (demand_receipt_rows in BaseObject.Data.Tables["IM_DemandReceiptItem"].Select("InventoryId is not null and isnull(UD_UnapprovedByScript, 0) &lt;&gt; 1"))
        {      	  
	        message = string.Empty;
	        
	        ic_check = true;
	        ic_forex_check1 = true;
	        ic_forex_check2 = true;
	        ic_forex_check3 = true;
	        ic_price_check = true;
	        req_check = true;
	        req_quantity_check = true;
	      
	        foreach (demand_allocation in BaseObject.Data.Tables["IM_ItemAllocation"].Select("DemandReceiptItemId = "+demand_receipt_rows["RecId"].ToString()+" and WorkOrderItemId is not null"))
            {
                message = string.Empty;
		        //ic_price = 0m;
		        ic_forex_id = 0;
		        ic_forex_price = 0m;
		        demand_price = 0m;
		        demand_forex_id = 0;
		        demand_forex_price = 0m;
		    
		        //if (!demand_receipt_rows.IsNull("UnitPrice"))
	            //    demand_price = Convert.ToDecimal(demand_receipt_rows["UnitPrice"]);
		        
	            if (!demand_receipt_rows.IsNull("ForexId"))
	                demand_forex_id = Convert.ToInt16(demand_receipt_rows["ForexId"]);
	            
		        if (!demand_receipt_rows.IsNull("ForexUnitPrice"))
	                demand_forex_price = Convert.ToDecimal(demand_receipt_rows["ForexUnitPrice"]);
		        
		        sb1 = new StringBuilder();
		        sb1.Clear();
		        sb1.AppendLine("select");
				//sb1.AppendLine("isnull(ICI.UnitPrice, 0) ICUnitPrice,");
                sb1.AppendLine("ICI.ForexId ICForexId, isnull(ICI.ForexUnitPrice, 0) ICForexUnitPrice");
                sb1.AppendLine("from MA_WorkOrderItem WI with (nolock)");
                sb1.AppendLine("left join MA_WorkOrder W with (nolock) on WI.WorkOrderId = W.RecId");
                sb1.AppendLine("left join MA_InitialCost IC with (nolock) on W.InitialCostId = IC.RecId");
                sb1.AppendLine("left join MA_InitialCostItem ICI with (nolock) on ICI.InitialCostId = IC.RecId");
                sb1.AppendLine("where WI.RecId = "+Convert.ToInt64(demand_allocation["WorkOrderItemId"]));
		        sb1.AppendLine("and ICI.InventoryId = "+Convert.ToInt64(demand_receipt_rows["InventoryId"]));
		        
		        dt1 = UtilityFunctions.GetDataTableList(BaseObject.Provider, BaseObject.Connection, BaseObject.Transaction, "dt1", sb1.ToString());
		        
		        req_variant_1 = string.Empty;
		        req_variant_2 = string.Empty;
		        req_requirement_grp = string.Empty;
		        req_operation = 0;
		        
		        if (!demand_receipt_rows.IsNull("ItemVariant1Code"))
	                req_variant_1 = Convert.ToString(demand_receipt_rows["ItemVariant1Code"]);
		    
	            if (!demand_receipt_rows.IsNull("ItemVariant2Code"))
	                req_variant_2 = Convert.ToString(demand_receipt_rows["ItemVariant2Code"]);
	            
		        if (!demand_allocation.IsNull("RequirementGroup"))
	                req_requirement_grp = Convert.ToString(demand_allocation["RequirementGroup"]);
		        
	            if (!demand_allocation.IsNull("OperationType"))
	                req_operation = Convert.ToInt16(demand_allocation["OperationType"]);
		        
		        sb2 = new StringBuilder();
		        sb2.Clear();
		        sb2.AppendLine("select isnull(R.InventoryId, 0) RInventoryId, isnull(R.Quantity, 0) RQuantity");
                sb2.AppendLine(",isnull(R.Variant1, \'\') RVariant1, isnull(R.Variant2, \'\') RVariant2");
		        sb2.AppendLine(",isnull(R.RequirementGroup, \'\') RequirementGroup");
                sb2.AppendLine("from MA_WorkOrderItem WI with (nolock)");
                sb2.AppendLine("left join MA_Requirement R with (nolock) on R.WorkOrderItemId = WI.RecId");
                sb2.AppendLine("where WI.RecId = "+Convert.ToInt64(demand_allocation["WorkOrderItemId"]));
                sb2.AppendLine("and R.InventoryId = "+Convert.ToInt64(demand_receipt_rows["InventoryId"]));
                sb2.AppendLine("and isnull(R.Variant1, \'\') = \'"+req_variant_1+"\'");
                sb2.AppendLine("and isnull(R.Variant2, \'\') = \'"+req_variant_2+"\'");
		        sb2.AppendLine("and isnull(R.RequirementGroup, \'\') = \'"+req_requirement_grp+"\'");
                sb2.AppendLine("and isnull(R.OperationType, 0) = "+req_operation);
		        
		        dt2 = UtilityFunctions.GetDataTableList(BaseObject.Provider, BaseObject.Connection, BaseObject.Transaction, "dt2", sb2.ToString());
		        
                if (dt1 == null || dt1.Rows.Count == 0)
	                ic_check = false;
                		
                else if (dt1 != null &amp;&amp; dt1.Rows.Count &gt; 0)
                {
                    //if (!dt1.Rows[0].IsNull("ICUnitPrice"))
	                //    ic_price = Convert.ToDecimal(dt1.Rows[0]["ICUnitPrice"]);
		    	    
	                if (!dt1.Rows[0].IsNull("ICForexId"))
	                    ic_forex_id = Convert.ToInt16(dt1.Rows[0]["ICForexId"]);
		    	    
	                if (!dt1.Rows[0].IsNull("ICForexUnitPrice"))
	                    ic_forex_price = Convert.ToDecimal(dt1.Rows[0]["ICForexUnitPrice"]);
		            
		            if (ic_forex_id != 0 &amp;&amp; demand_forex_id != 0 &amp;&amp; ic_forex_id != demand_forex_id)
		        	    ic_forex_check1 = false;
		            
		            else if (ic_forex_id == 0 &amp;&amp; demand_forex_id != 0)
		        	    ic_forex_check2 = false;
		            
		            else if (ic_forex_id != 0 &amp;&amp; demand_forex_id == 0)
		        	    ic_forex_check3 = false;
		            
		            else if (ic_forex_id == demand_forex_id &amp;&amp; demand_forex_price &gt; ic_forex_price)
		                ic_price_check = false;
                }
		    
		        if (dt2 == null || dt2.Rows.Count == 0)
	              req_check = false;
		        
		        else if (dt2 != null &amp;&amp; dt2.Rows.Count &gt; 0)
		        {
		            if (!demand_receipt_rows.IsNull("UnitId") &amp;&amp; (Convert.ToInt32(demand_receipt_rows["UnitId"]) == kg_id || Convert.ToInt32(demand_receipt_rows["UnitId"]) == kg_id2 || Convert.ToInt32(demand_receipt_rows["UnitId"]) == kg_id3))
		            {
	                    if (!dt2.Rows[0].IsNull("RQuantity") &amp;&amp; !demand_receipt_rows.IsNull("Quantity") &amp;&amp; Convert.ToDecimal(demand_allocation["Quantity"]) &gt; ((Convert.ToDecimal(dt2.Rows[0]["RQuantity"]) * (100 + kg_tolerance)) / 100))
		                    req_quantity_check = false;
		            }
		    	    
                    else if (!demand_receipt_rows.IsNull("UnitId") &amp;&amp; (Convert.ToInt32(demand_receipt_rows["UnitId"]) == piece_id || Convert.ToInt32(demand_receipt_rows["UnitId"]) == piece_id2 || Convert.ToInt32(demand_receipt_rows["UnitId"]) == piece_id3))
                    {
		                if (!dt2.Rows[0].IsNull("RQuantity") &amp;&amp; !demand_receipt_rows.IsNull("Quantity") &amp;&amp; Convert.ToDecimal(demand_allocation["Quantity"]) &gt; ((Convert.ToDecimal(dt2.Rows[0]["RQuantity"]) * (100 + piece_tolerance)) / 100))
		                    req_quantity_check = false;
		            }			  
		        }
	        }
	  
	        if (!ic_check || !req_check || !ic_forex_check1 || !ic_forex_check2 || !ic_forex_check3 || !ic_price_check || !req_quantity_check)
	        {  
                if (demand_receipt_rows.IsNull("IsApproved") || Convert.ToInt16(demand_receipt_rows["IsApproved"]) != 0)
		            demand_receipt_rows.SetField&lt;|int|&gt;("IsApproved", 0);
		        
		        if (demand_receipt_rows.IsNull("UD_UnapprovedByScript") || Convert.ToInt16(demand_receipt_rows["UD_UnapprovedByScript"]) != 1)
		            demand_receipt_rows.SetField&lt;|int|&gt;("UD_UnapprovedByScript", 1);
	        }
		    
	        if (!ic_check)
	            message += demand_receipt_rows["ItemOrderNo"]+". Satirda seçili olan malzeme, ön maliyet çalişmasinda mevcut değil."+Environment.NewLine;
            
			if (!req_check)
	            message += demand_receipt_rows["ItemOrderNo"]+". Satirda seçili olan malzeme/varyant için tedarik hesaplamasi mevcut değil."+Environment.NewLine;
            
			if (!ic_forex_check1)
                message += demand_receipt_rows["ItemOrderNo"]+". Satirdaki döviz cinsi ve ön maliyet çalişmasindaki döviz cinsi birbirlerinden farkli."+Environment.NewLine;
            
			if (!ic_forex_check2)
                message += demand_receipt_rows["ItemOrderNo"]+". Satirda döviz cinsi seçilmiş ancak ön maliyet çalişmasinda döviz cinsi seçilmemiş."+Environment.NewLine;
	        
			if (!ic_forex_check3)
                message += demand_receipt_rows["ItemOrderNo"]+". Satirda döviz cinsi seçilmemiş ancak ön maliyet çalişmasinda döviz cinsi seçilmiş."+Environment.NewLine;
	        
			if (!ic_price_check)  
	            message += demand_receipt_rows["ItemOrderNo"]+". Satirdaki fiyat bilgisi, ön maliyet çalişmasindaki fiyat bilgisinden yüksek."+Environment.NewLine;
            
			if (!req_quantity_check)
	            message += demand_receipt_rows["ItemOrderNo"]+". Satirdaki miktar, belirlenen toleranstan daha fazla. (Kg için %"+Convert.ToString(kg_tolerance)+", Adet için %"+Convert.ToString(piece_tolerance)+")"+Environment.NewLine;
	        
	        if (message != string.Empty)
	            total_message += message;
	        
			if (message != string.Empty)
	        {  
                message += "Script: (FisOnMaliyetKontrol)";
	            MessageBox.Show(message);
	        }
	    }
     
        if (BaseObject.CurrentRow.Row.IsNull("UD_UnapproveMessage") || Convert.ToString(BaseObject.CurrentRow.Row["UD_UnapproveMessage"]) == string.Empty)
	        BaseObject.CurrentRow.Row.SetField&lt;|string|&gt;("UD_UnapproveMessage", total_message);
    }
  
    if (BaseObject != null
    &amp;&amp; BaseObject.Name == "OrderReceiptEN"
    &amp;&amp; BaseObject.CurrentRow != null 
    &amp;&amp; BaseObject.CurrentRow.Row != null)
    {
        total_message_o = string.Empty;
	
	    foreach(order_receipt_rows in BaseObject.Data.Tables["IM_OrderReceiptItem"].Select("DemandReceiptItemId is not null"))
	    {
            message_o = string.Empty; 
	        
	        or_quantity_check = true;
	        or_forex_check = true;
	        or_price_check = true;
	        
	        or_quantity = 0m;
	        //or_price = 0m;
	        or_forex_id = 0;
	        or_forex_price = 0m;
	        
	        if (!order_receipt_rows.IsNull("Quantity"))
	            or_quantity = Convert.ToDecimal(order_receipt_rows["Quantity"]);
	        
	        //if (!order_receipt_rows.IsNull("UnitPrice"))
	        //    or_price = Convert.ToDecimal(order_receipt_rows["UnitPrice"]);
	        
	        if (!order_receipt_rows.IsNull("ForexId"))
	            or_forex_id = Convert.ToInt16(order_receipt_rows["ForexId"]);
	        
	        if (!order_receipt_rows.IsNull("ForexUnitPrice"))
	            or_forex_price = Convert.ToDecimal(order_receipt_rows["ForexUnitPrice"]);
	         
	        sb3 = new StringBuilder();
	        sb3.Clear();
			sb3.AppendLine("select");
            sb3.AppendLine("isnull(Quantity, 0) DQuantity,");
			//sb3.AppendLine("isnull(UnitPrice, 0) DUnitPrice,");
			sb3.AppendLine("isnull(ForexUnitPrice, 0) DForexPrice, isnull(ForexId, 0) DForexId");
            sb3.AppendLine("from IM_DemandReceiptItem with (nolock) where RecId ="+order_receipt_rows["DemandReceiptItemId"]);
		    
	        dt3 = UtilityFunctions.GetDataTableList(BaseObject.Provider, BaseObject.Connection, BaseObject.Transaction, "dt3", sb3.ToString());
		    
	        if(dt3 != null &amp;&amp; dt3.Rows.Count &gt; 0)
	        {
	            d_quantity = 0m;
	            //d_price = 0m;
	            d_forex_id = 0;
	            d_forex_price = 0m;
	            
	            if (!dt3.Rows[0].IsNull("DQuantity"))
	                d_quantity = Convert.ToDecimal(dt3.Rows[0]["DQuantity"]);
	            
	            //if (!dt3.Rows[0].IsNull("DUnitPrice"))
	            //    d_price = Convert.ToDecimal(dt3.Rows[0]["DUnitPrice"]);
	            
	            if (!dt3.Rows[0].IsNull("DForexId"))
	                d_forex_id = Convert.ToInt16(dt3.Rows[0]["DForexId"]);
	            
	            if (!dt3.Rows[0].IsNull("DForexPrice"))
	                d_forex_price = Convert.ToDecimal(dt3.Rows[0]["DForexPrice"]);
	        }
	        
	        if (or_quantity &gt; d_quantity)
	            or_quantity_check = false;
	        
	        if (or_forex_id != d_forex_id)
	            or_forex_check = false;
	        
			if (or_forex_id == d_forex_id &amp;&amp; or_forex_price &gt; d_forex_price)
	            or_price_check = false;
	        
            if (!or_quantity_check)
	            message_o += order_receipt_rows["ItemOrderNo"]+". Satirdaki miktar talep fişi satirindaki miktardan fazla."+Environment.NewLine;
            
			if (!or_forex_check)
	            message_o += order_receipt_rows["ItemOrderNo"]+". Satirdaki döviz cinsi, talep fişi satirindaki döviz cinsinden farkli."+Environment.NewLine;
            
			if (!or_price_check)
                message_o += order_receipt_rows["ItemOrderNo"]+". Satirdaki fiyat bilgisi, talep fişi satirindaki fiyat bilgisinden yüksek."+Environment.NewLine;
	        
			if (message_o != string.Empty)
	            total_message_o += message_o;
	        
			if (message_o != string.Empty)
	        {  
                message_o += "Script: (FisOnMaliyetKontrol)";
	            MessageBox.Show(message_o);
	        }
		    
            if (!or_quantity_check || !or_forex_check || !or_price_check)
                BaseObject.CurrentRow.Row.SetField&lt;|int|&gt;("IsApproved", 0);		  
	    }
    }  
}

function OnAfterSucceededPost(sender, eventArg)
{
    if(BaseObject != null
    &amp;&amp; BaseObject.Name == "WorkOrderProductionEN"  
    &amp;&amp; BaseObject.CurrentRow != null 
    &amp;&amp; BaseObject.CurrentRow.Row != null 
    &amp;&amp; !BaseObject.CurrentRow.Row.IsNull("CurrentAccountId")
    &amp;&amp; !BaseObject.CurrentRow.Row.IsNull("WorkOrderItemId")
    &amp;&amp; !BaseObject.CurrentRow.Row.IsNull("ProcessId")
    &amp;&amp; !BaseObject.CurrentRow.Row.IsNull("SubNo"))
    {
	    message_wop = string.Empty;
	    
	    sb4 = new StringBuilder();
	    sb4.Clear();
	    sb4.AppendLine("select");
	    //sb4.AppendLine("isnull(ICI.UnitPrice, 0) UnitPrice,");
		sb4.AppendLine("isnull(ICI.ForexUnitPrice, 0) ForexUnitPrice, isnull(ICI.ForexId, 0) ForexId,");
		sb4.AppendLine("ltrim(rtrim(E.EMail)) EMail, WI.OperationCode Colour, W.WorkOrderNo OrderNo");
	    sb4.AppendLine("from MA_WorkOrderItem WI with (nolock)");
	    sb4.AppendLine("left join MA_WorkOrder W with (nolock) on W.RecId = WI.WorkOrderId");
	    sb4.AppendLine("left join MA_InitialCost IC with (nolock) on IC.RecId = W.InitialCostId");
	    sb4.AppendLine("left join MA_InitialCostItem ICI with (nolock) on ICI.InitialCostId = IC.RecId");
	    sb4.AppendLine("left join MA_InitialCostCard C with (nolock) on C.RecId = ICI.InitialCostCardId");
	    sb4.AppendLine("left join MA_Process P with (nolock) on P.RecId = C.ProcessId");
	    sb4.AppendLine("left join HR_Employee E with (nolock) on E.RecId = W.EmployeeId");
	    sb4.AppendLine("where C.ProcessId = "+BaseObject.CurrentRow.Row["ProcessId"].ToString()+" and WI.RecId = "+BaseObject.CurrentRow.Row["WorkOrderItemId"].ToString());
        sb4.AppendLine("and WI.SubNo = "+BaseObject.CurrentRow.Row["SubNo"].ToString());
	    
	    dt4 = UtilityFunctions.GetDataTableList(BaseObject.Provider, BaseObject.Connection, BaseObject.Transaction, "dt4", sb4.ToString());
	    
	    if (dt4 != null &amp;&amp; dt4.Rows.Count &gt; 0)
	    {
	        message_wop = string.Empty;
	        
	        //unit_price = 0m;
	        forex_id = 0;
	        forex_unit_price = 0m;
            employee_mail = string.Empty;
	        
	        wop_order_no = string.Empty;
	        wop_colour = string.Empty;
	        wop_process_name = string.Empty;
	        wop_account_name = string.Empty;
	        //wop_unit_price = 0m;
	        wop_forex_id = 0;
	        wop_forex_unit_price = 0m;
	        
	        //if (!dt4.Rows[0].IsNull("UnitPrice"))
	        //    unit_price = Convert.ToDecimal(dt4.Rows[0]["UnitPrice"]);
	          
	        if (!dt4.Rows[0].IsNull("ForexId"))
	            forex_id = Convert.ToInt16(dt4.Rows[0]["ForexId"]);
		    
	        if (!dt4.Rows[0].IsNull("ForexUnitPrice"))
	            forex_unit_price = Convert.ToDecimal(dt4.Rows[0]["ForexUnitPrice"]);
	          
	        if (!dt4.Rows[0].IsNull("EMail"))
	        {
                if (mail_recipients != string.Empty)
	    	        employee_mail = Convert.ToString(dt4.Rows[0]["EMail"])+";";
			    
	            else
	                employee_mail = Convert.ToString(dt4.Rows[0]["EMail"]);
            }	  
		    
	        if (!dt4.Rows[0].IsNull("OrderNo"))
	            wop_order_no = Convert.ToString(dt4.Rows[0]["OrderNo"]);
		    
	        if (!dt4.Rows[0].IsNull("Colour"))
	            wop_colour = Convert.ToString(dt4.Rows[0]["Colour"]);	  
	        
	        if (!BaseObject.CurrentRow.Row.IsNull("ProcessName"))
	            wop_process_name = Convert.ToString(BaseObject.CurrentRow.Row["ProcessName"]);
		    
	        if (!BaseObject.CurrentRow.Row.IsNull("CurrentAccountName"))
	            wop_account_name = Convert.ToString(BaseObject.CurrentRow.Row["CurrentAccountName"]);
	        
	        //if (!BaseObject.CurrentRow.Row.IsNull("UnitPrice"))
	        //    wop_unit_price = Convert.ToDecimal(BaseObject.CurrentRow.Row["UnitPrice"]);
		    
	        if (!BaseObject.CurrentRow.Row.IsNull("ForexId"))
	            wop_forex_id = Convert.ToInt16(BaseObject.CurrentRow.Row["ForexId"]);
		    
	        if (!BaseObject.CurrentRow.Row.IsNull("ForexUnitPrice"))
	            wop_forex_unit_price = Convert.ToDecimal(BaseObject.CurrentRow.Row["ForexUnitPrice"]);
	        
	        if (forex_id != wop_forex_id)
	        {
                message_wop += wop_order_no+"kodlu Order "+wop_colour+" rengi için, "+wop_process_name+" operasyonu üretim girişi ile ön maliyet çalişmasindaki döviz cinsleri birbirlerinden farkli.";
	        }
	    	    
	        if (forex_id == wop_forex_id &amp;&amp; wop_forex_unit_price &gt; forex_unit_price)
	        {
	    	    message_wop += wop_order_no+"kodlu Order "+wop_colour+" rengi için, "+wop_process_name+" operasyonu üretim girişinde fiyat bilgisi, ön maliyet çalişmasindaki fiyat bilgisinden yüksek.";
	        }  
	    }
	    
	    if (message_wop != string.Empty)
	    {  
            taskm = BaseObject.Container.Resolve&lt;|TaskMessageService|&gt;("TaskMessageService");
            taskm.SendEmail(employee_mail+mail_recipients, "Order Üretim Girişi Kontrolü / Extreme", message_wop.ToString());
	    }
    }	
}</ScriptText>
</ScriptDefinition>